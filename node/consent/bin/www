#!/usr/bin/env node

//
// Usage is : npm start <password to unlock blockchain account> <password for certificate private key>
//
if (process.argv.length != 4) {
    console.log('npm start <password to unlock blockchain account> <password for certificate private key>');
    return;
}

//
// Get hold of the configuration
//
var fs = require('fs');
try {
    config = JSON.parse(fs.readFileSync('config.json'));
} catch (err) {
    config = {web3url: "http://localhost:8545"};
    if (err.code != 'ENOENT') {
	console.log ("Unable to open configuration file");
	throw err;
    } else {
	console.log ("No configuration file found, using default");
    }
}

/**
 * Module dependencies.
 */

var express = require('express');
var app = require('../app');
var debug = require('debug')('consent:server');
var http = require('http');
var https = require('https');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3080');
var portS = normalizePort(process.env.PORTS || '3443');
app.set('port', portS);

/**
* Create the HTTP server. It will always redirect to HTTPS.
*/
// Secondary http app
var httpApp = express();
var httpRouter = express.Router();
httpApp.use('*', httpRouter);
httpRouter.get('*', function(req, res){
    var host = req.get('Host');
    // replace the port in the host, dont do it this way. use node URL module, this is just a quick prototype! Not for production.
    host = host.replace(/:\d+$/, ":"+app.get('port'));
    // determine the redirect destination
    var destination = ['https://', host, req.url].join('');
    return res.redirect(destination);
});
var server = http.createServer(httpApp);

/**
 * Create HTTPS server. This will be handled by the application
 */
var privateKey  = fs.readFileSync(config.privateKey, 'utf8');
var certificate = fs.readFileSync(config.certificate, 'utf8');
var ca = fs.readFileSync(config.ca, 'utf8');
var ica = fs.readFileSync(config.ica, 'utf8');
var credentials = { key: privateKey, cert: certificate, passphrase: process.argv[3], ca: [ca, ica] };
var serverS = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

serverS.listen(portS);
serverS.on('error', onError);
serverS.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
