#!/usr/bin/env node

//
// Usage is : npm start <password to unlock blockchain account> <password for certificate private key>
//
// Starts up the consent web server
//
// Copyright 2017 Tomas Stenlund
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

if (process.argv.length != 4) {
    console.log('npm start <password to unlock blockchain account> <password for certificate private key>');
    return;
}

console.log ("WWW: Reading configuration from config.json");
//
// Get hold of the configuration
//
var fs = require('fs');
try {
    config = JSON.parse(fs.readFileSync('config.json'));
} catch (err) {
    console.log ("WWW: Unable to open configuration file = " + err);
    throw "WWW: Missing configuration file";
}

/**
 * Module dependencies.
 */

var express = require('express');
var app = require('../app');
var debug = require('debug')('consent:server');
var http = require('http');
var https = require('https');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3080');
var portS = normalizePort(process.env.PORTS || '3443');
app.set('port', portS);

/**
* Create the HTTP server. It will always redirect to HTTPS.
*/
var httpApp = express();
var httpRouter = express.Router();
httpApp.use('*', httpRouter);
httpRouter.get('*', function(req, res){
    var host = req.get('Host');
    // replace the port in the host, dont do it this way. use node URL module, this is just a quick prototype! Not for production.
    host = host.replace(/:\d+$/, ":"+app.get('port'));
    // determine the redirect destination
    var destination = ['https://', host, req.url].join('');
    return res.redirect(destination);
});

try {
    var server = http.createServer(httpApp);
} catch (err) {
    console.log ("WWW: Unable to create HTTP server = " + err);
    throw "WWW: Unable to create HTTP server";
}

/**
 * Create HTTPS server. This will be handled by the application
 */
try {
    var privateKey  = fs.readFileSync(config.privateKey, 'utf8');
    var certificate = fs.readFileSync(config.certificate, 'utf8');
    var ca = fs.readFileSync(config.ca, 'utf8');
    var ica = fs.readFileSync(config.ica, 'utf8');
    var credentials = { key: privateKey, cert: certificate, passphrase: process.argv[3], ca: [ca, ica] };
    serverS = https.createServer(credentials, app);
} catch (err) {
    console.log ("WWW: Unable to create HTTPS server, make sure you got the certificate and keys setup properly = " + err);
    throw "WWW: Unable to create HTTPS server";
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

serverS.listen(portS);
serverS.on('error', onError);
serverS.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
